{
    "detect_clearsky.DetectClear.time_detect_clearsky": {
        "code": "class DetectClear:\n    def time_detect_clearsky(self, ndays):\n        clearsky.detect_clearsky(\n            self.measured, self.clearsky, self.times, self.window_length\n        )\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.lat = 35.1\n        self.lon = -106.6\n        self.solar_position = solarposition.get_solarposition(\n            self.times, self.lat, self.lon)\n        clearsky_df = clearsky.simplified_solis(\n            self.solar_position['apparent_elevation'])\n        self.clearsky = clearsky_df['ghi']\n        measured_dni = clearsky_df['dni'].where(\n            (self.times.hour % 2).astype(bool), 0)\n        cos_zen = np.cos(np.deg2rad(self.solar_position['apparent_zenith']))\n        self.measured = measured_dni * cos_zen + clearsky_df['dhi']\n        self.measured *= 0.98\n        self.window_length = 10",
        "min_run_count": 2,
        "name": "detect_clearsky.DetectClear.time_detect_clearsky",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9f702043d63e9ce5d26317636c1ed3c90232893763b91a1434757320dc70ad2f",
        "warmup_time": -1
    },
    "irradiance.Irradiance.time_aoi": {
        "code": "class Irradiance:\n    def time_aoi(self):\n        irradiance.aoi(self.tilt, self.azimuth,\n                       self.solar_position.apparent_zenith,\n                       self.solar_position.azimuth)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.Irradiance.time_aoi",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3b647b188210e8908d09def8075125326e0be2c84475d1df5902049801bbce75",
        "warmup_time": -1
    },
    "irradiance.Irradiance.time_aoi_projection": {
        "code": "class Irradiance:\n    def time_aoi_projection(self):\n        irradiance.aoi_projection(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.Irradiance.time_aoi_projection",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1179c06295d1973a6d7b937f1819bf42853e6483a7416a33ae61136345ce57fb",
        "warmup_time": -1
    },
    "irradiance.Irradiance.time_dirindex": {
        "code": "class Irradiance:\n    def time_dirindex(self):\n        irradiance.dirindex(self.clearsky_irradiance.ghi,\n                            self.clearsky_irradiance.ghi,\n                            self.clearsky_irradiance.dni,\n                            self.solar_position.apparent_zenith,\n                            self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.Irradiance.time_dirindex",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "be06adb7a48a40f97331e048b6a1de6f30d0d0f05e995ee0eb6cf5b7ae2d3827",
        "warmup_time": -1
    },
    "irradiance.Irradiance.time_dirint": {
        "code": "class Irradiance:\n    def time_dirint(self):\n        irradiance.dirint(self.clearsky_irradiance.ghi,\n                          self.solar_position.apparent_zenith,\n                          self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.Irradiance.time_dirint",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3c5cf911e401536b0cb0b6262184730d1129d0978a2c7aba2384b463de97c893",
        "warmup_time": -1
    },
    "irradiance.Irradiance.time_disc": {
        "code": "class Irradiance:\n    def time_disc(self):\n        irradiance.disc(self.clearsky_irradiance.ghi,\n                        self.solar_position.apparent_zenith,\n                        self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.Irradiance.time_disc",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0d62ee79c3d5359dbbc332f1a6a3680914a81e73f7ae62cd2dafba15f05884e1",
        "warmup_time": -1
    },
    "irradiance.Irradiance.time_erbs": {
        "code": "class Irradiance:\n    def time_erbs(self):\n        irradiance.erbs(self.clearsky_irradiance.ghi,\n                        self.solar_position.apparent_zenith,\n                        self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.Irradiance.time_erbs",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6c160f7d30317eb7fa330b554cb3a4f1623fd7ea7709f772b4ed4d80f56ffa52",
        "warmup_time": -1
    },
    "irradiance.Irradiance.time_get_extra_radiation": {
        "code": "class Irradiance:\n    def time_get_extra_radiation(self):\n        irradiance.get_extra_radiation(self.days)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.Irradiance.time_get_extra_radiation",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e18dbf6318c72698e6b07e752c186c475f4f80b3e7f64ea6a140d99ef62a6d90",
        "warmup_time": -1
    },
    "irradiance.Irradiance.time_get_ground_diffuse": {
        "code": "class Irradiance:\n    def time_get_ground_diffuse(self):\n        irradiance.get_ground_diffuse(self.tilt, self.clearsky_irradiance.ghi)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.Irradiance.time_get_ground_diffuse",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "432eb6d93dd3eb8dacafd8b7688332641ced5e38cef55be87aa059fc1602eb29",
        "warmup_time": -1
    },
    "irradiance.Irradiance.time_get_total_irradiance": {
        "code": "class Irradiance:\n    def time_get_total_irradiance(self):\n        irradiance.get_total_irradiance(self.tilt, self.azimuth,\n                                        self.solar_position.apparent_zenith,\n                                        self.solar_position.azimuth,\n                                        self.clearsky_irradiance.dni,\n                                        self.clearsky_irradiance.ghi,\n                                        self.clearsky_irradiance.dhi)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.Irradiance.time_get_total_irradiance",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "636a200318992ce212bde7aa680ebccd54a2c1558efb4b99e838ffe2a60f416b",
        "warmup_time": -1
    },
    "location.Location.time_location_get_airmass": {
        "code": "class Location:\n    def time_location_get_airmass(self):\n        self.location.get_airmass(solar_position=self.solar_position)\n\n    def setup(self):\n        set_solar_position(self)",
        "min_run_count": 2,
        "name": "location.Location.time_location_get_airmass",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "588b69638c1a6ec9b5141d16209e9162dc74336f9013282de3dfbb462698b26e",
        "warmup_time": -1
    },
    "location.Location.time_location_get_clearsky": {
        "code": "class Location:\n    def time_location_get_clearsky(self):\n        self.location.get_clearsky(times=self.times,\n                                   solar_position=self.solar_position)\n\n    def setup(self):\n        set_solar_position(self)",
        "min_run_count": 2,
        "name": "location.Location.time_location_get_clearsky",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f60edac83a9a6e3900900e8d8a2e857af67dbe5cba75871736e106899cd46a98",
        "warmup_time": -1
    },
    "location.Location.time_location_get_solarposition": {
        "code": "class Location:\n    def time_location_get_solarposition(self):\n        self.location.get_solarposition(times=self.times)\n\n    def setup(self):\n        set_solar_position(self)",
        "min_run_count": 2,
        "name": "location.Location.time_location_get_solarposition",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8fd3e3632c37c96dbb3419fe7b7852e76694f95f716a076311276503d5145ba6",
        "warmup_time": -1
    },
    "location.Location_0_6_1.time_location_get_sun_rise_set_transit_pyephem": {
        "code": "class Location_0_6_1:\n    def time_location_get_sun_rise_set_transit_pyephem(self):\n        self.location.get_sun_rise_set_transit(times=self.days,\n                                               method='pyephem')\n\n    def setup(self):\n        if parse_version(pvlib.__version__) < parse_version('0.6.1'):\n            raise NotImplementedError\n    \n        set_solar_position(self)",
        "min_run_count": 2,
        "name": "location.Location_0_6_1.time_location_get_sun_rise_set_transit_pyephem",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a331c66d50a25e7a63ab7d62c34584dc03514385bd8b254cc0d01d6a148f1e2f",
        "warmup_time": -1
    },
    "location.Location_0_6_1.time_location_get_sun_rise_set_transit_spa": {
        "code": "class Location_0_6_1:\n    def time_location_get_sun_rise_set_transit_spa(self):\n        self.location.get_sun_rise_set_transit(times=self.days,\n                                               method='spa')\n\n    def setup(self):\n        if parse_version(pvlib.__version__) < parse_version('0.6.1'):\n            raise NotImplementedError\n    \n        set_solar_position(self)",
        "min_run_count": 2,
        "name": "location.Location_0_6_1.time_location_get_sun_rise_set_transit_spa",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "38ae64f4d0240fdcedf30f8287c01235d67a81d9493acac3a4c3338f5c602f35",
        "warmup_time": -1
    },
    "scaling.Scaling.time__compute_vr": {
        "code": "class Scaling:\n    def time__compute_vr(self):\n        scaling._compute_vr(self.positions, self.cloud_speed, self.tmscales)\n\n    def setup(self):\n        self.n = 1000\n        lat = np.array((9.99, 10, 10.01))\n        lon = np.array((4.99, 5, 5.01))\n        self.coordinates = np.array([(lati, loni) for\n                                     (lati, loni) in zip(lat, lon)])\n        self.times = pd.date_range('2019-01-01', freq='1T', periods=self.n)\n        self.positions = np.array([[0, 0], [100, 0], [100, 100], [0, 100]])\n        self.clearsky_index = pd.Series(np.random.rand(self.n),\n                                        index=self.times)\n        self.cloud_speed = 5\n        self.tmscales = np.array((1, 2, 4, 8, 16, 32, 64,\n                                 128, 256, 512, 1024, 2048, 4096))",
        "min_run_count": 2,
        "name": "scaling.Scaling.time__compute_vr",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cdba69fb9e52ee04eddd1f41f612ac2713dd5e2f7bab07c14ea9e5a5e7d2ac8a",
        "warmup_time": -1
    },
    "scaling.Scaling.time__compute_wavelet": {
        "code": "class Scaling:\n    def time__compute_wavelet(self):\n        scaling._compute_wavelet(self.clearsky_index, dt=1)\n\n    def setup(self):\n        self.n = 1000\n        lat = np.array((9.99, 10, 10.01))\n        lon = np.array((4.99, 5, 5.01))\n        self.coordinates = np.array([(lati, loni) for\n                                     (lati, loni) in zip(lat, lon)])\n        self.times = pd.date_range('2019-01-01', freq='1T', periods=self.n)\n        self.positions = np.array([[0, 0], [100, 0], [100, 100], [0, 100]])\n        self.clearsky_index = pd.Series(np.random.rand(self.n),\n                                        index=self.times)\n        self.cloud_speed = 5\n        self.tmscales = np.array((1, 2, 4, 8, 16, 32, 64,\n                                 128, 256, 512, 1024, 2048, 4096))",
        "min_run_count": 2,
        "name": "scaling.Scaling.time__compute_wavelet",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5437fdf3c07e9e25dd0835688eef96334afbbaec89cac5d5ae230c8c03a581cd",
        "warmup_time": -1
    },
    "scaling.Scaling.time_latlon_to_xy": {
        "code": "class Scaling:\n    def time_latlon_to_xy(self):\n        scaling.latlon_to_xy(self.coordinates)\n\n    def setup(self):\n        self.n = 1000\n        lat = np.array((9.99, 10, 10.01))\n        lon = np.array((4.99, 5, 5.01))\n        self.coordinates = np.array([(lati, loni) for\n                                     (lati, loni) in zip(lat, lon)])\n        self.times = pd.date_range('2019-01-01', freq='1T', periods=self.n)\n        self.positions = np.array([[0, 0], [100, 0], [100, 100], [0, 100]])\n        self.clearsky_index = pd.Series(np.random.rand(self.n),\n                                        index=self.times)\n        self.cloud_speed = 5\n        self.tmscales = np.array((1, 2, 4, 8, 16, 32, 64,\n                                 128, 256, 512, 1024, 2048, 4096))",
        "min_run_count": 2,
        "name": "scaling.Scaling.time_latlon_to_xy",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "de3468a855771c9933a2ca961566cc7e26f1ece73b69855a109612f9c4117674",
        "warmup_time": -1
    },
    "scaling.Scaling.time_wvm": {
        "code": "class Scaling:\n    def time_wvm(self):\n        scaling.wvm(self.clearsky_index, self.positions,\n                    self.cloud_speed, dt=1)\n\n    def setup(self):\n        self.n = 1000\n        lat = np.array((9.99, 10, 10.01))\n        lon = np.array((4.99, 5, 5.01))\n        self.coordinates = np.array([(lati, loni) for\n                                     (lati, loni) in zip(lat, lon)])\n        self.times = pd.date_range('2019-01-01', freq='1T', periods=self.n)\n        self.positions = np.array([[0, 0], [100, 0], [100, 100], [0, 100]])\n        self.clearsky_index = pd.Series(np.random.rand(self.n),\n                                        index=self.times)\n        self.cloud_speed = 5\n        self.tmscales = np.array((1, 2, 4, 8, 16, 32, 64,\n                                 128, 256, 512, 1024, 2048, 4096))",
        "min_run_count": 2,
        "name": "scaling.Scaling.time_wvm",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "27c45cc4001ce5b443f86f5db11f82da191c496a677f33ad6696b0d238590316",
        "warmup_time": -1
    },
    "solarposition.SolarPosition.time_ephemeris": {
        "code": "class SolarPosition:\n    def time_ephemeris(self, ndays):\n        solarposition.ephemeris(self.times, self.lat, self.lon)\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition.SolarPosition.time_ephemeris",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0cec9f456e0b3afe25b1276c4b65f031aeefcb946be1f1799e5464be56858d31",
        "warmup_time": -1
    },
    "solarposition.SolarPosition.time_ephemeris_localized": {
        "code": "class SolarPosition:\n    def time_ephemeris_localized(self, ndays):\n        solarposition.ephemeris(self.times_localized, self.lat, self.lon)\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition.SolarPosition.time_ephemeris_localized",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "30e784c9a8816a832a26c8830346bece1998377e52c35f1067868c72c950ff90",
        "warmup_time": -1
    },
    "solarposition.SolarPosition.time_nrel_earthsun_distance": {
        "code": "class SolarPosition:\n    def time_nrel_earthsun_distance(self, ndays):\n        solarposition.nrel_earthsun_distance(self.times_localized)\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition.SolarPosition.time_nrel_earthsun_distance",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "db907059fae0b75e926efdd158ab7ccf7c84b88bc15dd9d72e71b3175c4001a7",
        "warmup_time": -1
    },
    "solarposition.SolarPosition.time_pyephem": {
        "code": "class SolarPosition:\n    def time_pyephem(self, ndays):\n        solarposition.pyephem(self.times_localized, self.lat, self.lon)\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition.SolarPosition.time_pyephem",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9ab40ad95317886f9eecea0edeb53440b28a61fcd44695e75c91c8668dce2178",
        "warmup_time": -1
    },
    "solarposition.SolarPosition.time_spa_python": {
        "code": "class SolarPosition:\n    def time_spa_python(self, ndays):\n        solarposition.spa_python(self.times_localized, self.lat, self.lon)\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition.SolarPosition.time_spa_python",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5d07d0c0038c41e33e78a17a879744fb49a68efe59361510c4b669494bb4c0c4",
        "warmup_time": -1
    },
    "solarposition.SolarPosition.time_sun_rise_set_transit_ephem": {
        "code": "class SolarPosition:\n    def time_sun_rise_set_transit_ephem(self, ndays):\n        solarposition.sun_rise_set_transit_ephem(\n            self.times_daily, self.lat, self.lon)\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition.SolarPosition.time_sun_rise_set_transit_ephem",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "99f398265e26841b75fd9df0b30fd3c8bd88b14cf8b1d66096fef9fe5e25e2d2",
        "warmup_time": -1
    },
    "solarposition.SolarPosition.time_sun_rise_set_transit_geometric_full_comparison": {
        "code": "class SolarPosition:\n    def time_sun_rise_set_transit_geometric_full_comparison(self, ndays):\n        dayofyear = self.times_daily.dayofyear\n        declination = solarposition.declination_spencer71(dayofyear)\n        equation_of_time = solarposition.equation_of_time_spencer71(dayofyear)\n        solarposition.sun_rise_set_transit_geometric(\n            self.times_daily, self.lat, self.lon, declination,\n            equation_of_time)\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition.SolarPosition.time_sun_rise_set_transit_geometric_full_comparison",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4b80d659e148c36913bf6fdab24639ef07c08a0be5a3fb2d3ebd7fcae1d36dc2",
        "warmup_time": -1
    },
    "solarposition.SolarPosition.time_sun_rise_set_transit_spa": {
        "code": "class SolarPosition:\n    def time_sun_rise_set_transit_spa(self, ndays):\n        sun_rise_set_transit_spa(self.times_daily, self.lat, self.lon)\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition.SolarPosition.time_sun_rise_set_transit_spa",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e92a184909f72b9f6c52cff5c8a8210c77f15c446b49bfe8bf05e9d55b67b120",
        "warmup_time": -1
    },
    "solarposition.SolarPositionCalcTime.time_calc_time": {
        "code": "class SolarPositionCalcTime:\n    def time_calc_time(self):\n        # datetime.datetime(2020, 9, 14, 13, 24, 13, 861913, tzinfo=<UTC>)\n        solarposition.calc_time(\n            self.start, self.end, self.lat, self.lon, self.attribute,\n            self.value\n        )\n\n    def setup(self):\n        # test calc_time for finding times at which sun is 3 degrees\n        # above the horizon.\n        # Tucson 2020-09-14 sunrise at 6:08 AM MST, 13:08 UTC\n        # according to google.\n        self.start = datetime.datetime(2020, 9, 14, 12)\n        self.end = datetime.datetime(2020, 9, 14, 15)\n        self.value = 0.05235987755982988\n        self.lat = 32.2\n        self.lon = -110.9\n        self.attribute = 'alt'",
        "min_run_count": 2,
        "name": "solarposition.SolarPositionCalcTime.time_calc_time",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c16325f76cd89a97dbe18070b0d3676c8233f7699e616ec01b38eae741a1c9da",
        "warmup_time": -1
    },
    "solarposition_numba.SolarPositionNumba.time_spa_python": {
        "code": "class SolarPositionNumba:\n    def time_spa_python(self, ndays):\n        solarposition.spa_python(\n            self.times_localized, self.lat, self.lon, how='numba')\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition_numba.SolarPositionNumba.time_spa_python",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f5c6dac37e461d531e6ac48fbac036c230ded3021315d3d174969f538b57e8cf",
        "warmup_time": -1
    },
    "solarposition_numba.SolarPositionNumba.time_sun_rise_set_transit_spa": {
        "code": "class SolarPositionNumba:\n    def time_sun_rise_set_transit_spa(self, ndays):\n        sun_rise_set_transit_spa(\n            self.times_daily, self.lat, self.lon, how='numba')\n\n    def setup(self, ndays):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=1440*ndays)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6\n        self.times_daily = pd.date_range(\n            start='20180601', freq='24h', periods=ndays, tz='Etc/GMT+7')",
        "min_run_count": 2,
        "name": "solarposition_numba.SolarPositionNumba.time_sun_rise_set_transit_spa",
        "number": 0,
        "param_names": [
            "ndays"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bf3d5c1fd60630f6ceb96d3d56eb8d3a47afa69afe63d276a6382e2a43be6be4",
        "warmup_time": -1
    },
    "temperature.Fuentes.time_fuentes": {
        "code": "class Fuentes:\n    def time_fuentes(self):\n        pvlib.temperature.fuentes(self.poa, self.tamb, self.wind_speed,\n                                  noct_installed=45)\n\n    def setup(self):\n        if parse_version(pvlib.__version__) < parse_version('0.8.0'):\n            raise NotImplementedError\n    \n        set_weather_data(self)",
        "min_run_count": 2,
        "name": "temperature.Fuentes.time_fuentes",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d11c7010997b69643e2f8e0a1c1dd5f6fa7d1224785430cd45e5a4fcb739b7a9",
        "warmup_time": -1
    },
    "temperature.SAPM.time_sapm_cell": {
        "code": "class SAPM:\n    def time_sapm_cell(self):\n        # use version-appropriate wrapper\n        self.sapm_cell_wrapper(self.poa, self.tamb, self.wind_speed)\n\n    def setup(self):\n        set_weather_data(self)\n        if parse_version(pvlib.__version__) >= parse_version('0.7.0'):\n            kwargs = pvlib.temperature.TEMPERATURE_MODEL_PARAMETERS['sapm']\n            kwargs = kwargs['open_rack_glass_glass']\n            self.sapm_cell_wrapper = partial(pvlib.temperature.sapm_cell,\n                                             **kwargs)\n        else:\n            sapm_celltemp = pvlib.pvsystem.sapm_celltemp\n    \n            def sapm_cell_wrapper(poa_global, temp_air, wind_speed):\n                # just swap order; model params are provided by default\n                return sapm_celltemp(poa_global, wind_speed, temp_air)\n            self.sapm_cell_wrapper = sapm_cell_wrapper",
        "min_run_count": 2,
        "name": "temperature.SAPM.time_sapm_cell",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7e22d15880756cf3058aedd30ba06679400b754adfe65234a0e90dcca86b701b",
        "warmup_time": -1
    },
    "tracking.SingleAxis.time_singleaxis": {
        "code": "class SingleAxis:\n    def time_singleaxis(self):\n        with np.errstate(invalid='ignore'):\n            tracking.singleaxis(self.solar_position.apparent_zenith,\n                                self.solar_position.azimuth,\n                                axis_tilt=0,\n                                axis_azimuth=0,\n                                max_angle=60,\n                                backtrack=True,\n                                gcr=0.45)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.lat = 35.1\n        self.lon = -106.6\n        self.solar_position = solarposition.get_solarposition(self.times,\n                                                              self.lat,\n                                                              self.lon)",
        "min_run_count": 2,
        "name": "tracking.SingleAxis.time_singleaxis",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4068649442cab168c9782b3916d83b646d2ed0a0fde4bce138acc561f06a6f27",
        "warmup_time": -1
    },
    "version": 2
}